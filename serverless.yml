service: serverless-web-forms
frameworkVersion: "2"
useDotenv: true
# Our serverless infra provider section
provider:
  name: aws
  stage: ${opt:stage}
  runtime: nodejs12.x
  region: us-east-1
  lambdaHashingVersion: 20201221
  environment:
    ENTRIES_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    SNS_TOPIC_ARN: !Ref FormsSNSTopic
  apiGateway:
    shouldStartNameWithService: true
    apiKeys:
      - name: website-${opt:stage, self:provider.stage}
    usagePlan:
      quota:
        limit: 300
        offset: 2
        period: MONTH
      throttle:
        burstLimit: 2
        rateLimit: 1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - ses:SendTemplatedEmail
        - sts:AssumeRole
        - sns:Publish
      Resource: "*"
# Serverless functions
functions:
  formSubmission:
    handler: index.submit
    memorySize: 128
    environment:
      VERIFICATION_FROM_EMAIL_ADDR: ${env:VERIFICATION_FROM_EMAIL_ADDR}
    description: Save the form entry details to DynamoDB and send the verification email.
    events:
      - http:
          path: formSubmit
          method: post
          private: true
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  formVerification:
    handler: index.verify
    memorySize: 128
    environment:
      VAULT_DOMAIN: ${env:VAULT_DOMAIN}
      VAULT_PORT: ${env:VAULT_PORT}
      VAULT_IAM_ROLE: ${env:VAULT_IAM_ROLE}
      VAULT_SECRET_PATH: ${env:VAULT_SECRET_PATH}
      SERVICE_DESK_USERNAME: ${env:SERVICE_DESK_USERNAME}
      SERVICE_DESK_DOMAIN: ${env:SERVICE_DESK_DOMAIN}
      VERIFICATION_FROM_EMAIL_ADDR: ${env:VERIFICATION_FROM_EMAIL_ADDR}
    description: Verify the GET token header from the email verification link. Create the new Ticket. Delete the form entry from DynamoDB.
    events:
      - http:
          path: formVerify
          method: get
          private: false
resources:
  Resources:
    FormsSNSTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: ServerlessFormsTopic-${opt:stage, self:provider.stage}
    FormEntriesDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.ENTRIES_TABLE}
package:
  exclude:
    - ./form_data.json
    - ./package.json
    - ./setup_form_data.js
    - ./yarn.lock
    - ./config/**
    - ./templates/**
    - ./html_examples/**
  include:
    - ./index.js
    - ./form_data.json
plugins:
  - serverless-offline
  - serverless-plugin-scripts
  - "@haftahave/serverless-ses-template"
custom:
  scripts:
    commands:
      collectFormData: node setup_form_data.js --path config/formConfig.json --outPath form_data.json
  sesTemplates:
    addStage: true # Specifies whether to add stage to template name (default false)
    configFile: "./ses-template.js" # Config file path (default './ses-email-templates/index.js')
    disableAutoDeploy: false
    region: "us-east-1" # Specifies AWS region for SES templates (not required)
